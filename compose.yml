networks:
  university-network:
    driver: bridge

services:
  redis:
    image: redis:latest
    container_name: redis
    networks:
      - university-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"
    volumes:
      - ./bd/data/redis:/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always

  mongo:
    image: mongo:latest
    container_name: mongo
    networks:
      - university-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "27017:27017"
    volumes:
      - ./bd/data/mongo:/data/db
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always

  neo4j:
    image: neo4j:latest
    container_name: neo4j
    networks:
      - university-network
    healthcheck:
      test: [ "CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./bd/data/neo4j:/data
    environment:
      NEO4J_AUTH: none
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always

  elasticsearch:
    image: elasticsearch:8.18.0
    container_name: elasticsearch
    networks:
      - university-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # отключает безопасность для упрощённого запуска
      - ES_JAVA_OPTS=-Xms1g -Xmx1g    # можно уменьшить в зависимости от вашей машины
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./bd/data/elasticsearch:/usr/share/elasticsearch/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always

  postgres:
    image: postgres:latest
    container_name: postgres
    networks:
      - university-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d university_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: university_db
    ports:
      - "5432:5432"
    volumes:
      - ./bd/data/postgres:/var/lib/postgresql/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always

  data-generator:
    build:
      context: generate_data
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      - WAIT_FOR_DB=true
    networks:
      - university-network

  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - lab1-service
    networks:
      - university-network
    environment:
      - SECRET_KEY=your-secret-key-here
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - LAB1_SERVICE_URL=http://lab1-service:8000

  lab1-service:
    build:
      context: ./lab1_service
      dockerfile: Dockerfile
    networks:
      - university-network
    environment:
      - DB_HOST=postgres
      - DB_NAME=university_db
      - DB_USER=user
      - DB_PASSWORD=password
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEO4J_URI=bolt://neo4j:7687
    depends_on:
      - postgres
      - elasticsearch
      - neo4j
      - redis

  lab2-service:
    build:
      context: ./lab2_service
      dockerfile: Dockerfile
    networks:
      - university-network
    environment:
      - DB_HOST=postgres
      - DB_NAME=university_db
      - DB_USER=user
      - DB_PASSWORD=password
      - MONGO_HOST=mongo
    depends_on:
      - postgres
      - mongo
